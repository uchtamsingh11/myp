'use client';

import { useState, useEffect, useCallback } from 'react';
import { ChevronDown, ChevronRight } from 'lucide-react';
import { useRouter, usePathname } from 'next/navigation';
import { supabase } from '../../utils/supabase';
import { useAuth } from '../../contexts/AuthContext';

export default function Sidebar({ onMenuItemClick, activeMenuItem, isAdmin = false }) {
  const router = useRouter();
  const pathname = usePathname();
  const { signOut } = useAuth();

  // State for tracking which menu is open
  const [tradingViewOpen, setTradingViewOpen] = useState(false);
  const [scalpingToolOpen, setScalpingToolOpen] = useState(false);
  const [copyTradingOpen, setCopyTradingOpen] = useState(false);
  const [marketplaceOpen, setMarketplaceOpen] = useState(false);
  const [backTestOpen, setBackTestOpen] = useState(false);
  const [optimizationOpen, setOptimizationOpen] = useState(false);
  const [myDeveloperOpen, setMyDeveloperOpen] = useState(false);
  const [pricingOpen, setPricingOpen] = useState(false);
  const [faqOpen, setFaqOpen] = useState(false);
  const [supportOpen, setSupportOpen] = useState(false);
  const [adminOpen, setAdminOpen] = useState(false);

  // State for tracking which menu item is active
  const [activeItem, setActiveItem] = useState(
    activeMenuItem ||
    (typeof window !== 'undefined' && sessionStorage.getItem('dashboardActiveMenuItem')) ||
    'Dashboard'
  );

  // Set active menu item based on current pathname when page loads/refreshes
  useEffect(() => {
    // This will run when the component mounts or pathname changes
    if (pathname) {
      const newActiveItem = getActiveMenuItemFromPath(pathname);
      setActiveItem(newActiveItem);
      
      // Auto-expand submenus based on the current path
      if (newActiveItem.includes('Trading View')) {
        setTradingViewOpen(true);
      } else if (newActiveItem.includes('Scalping Tool')) {
        setScalpingToolOpen(true);
      } else if (newActiveItem.includes('Copy Trading')) {
        setCopyTradingOpen(true);
      } else if (newActiveItem.includes('Marketplace')) {
        setMarketplaceOpen(true);
      } else if (newActiveItem.includes('Back Test')) {
        setBackTestOpen(true);
      } else if (newActiveItem.includes('Optimization')) {
        setOptimizationOpen(true);
      } else if (newActiveItem.includes('My Developer')) {
        setMyDeveloperOpen(true);
      } else if (newActiveItem.includes('Admin')) {
        setAdminOpen(true);
      }
      
      // Store it in session storage
      if (typeof window !== 'undefined') {
        sessionStorage.setItem('dashboardActiveMenuItem', newActiveItem);
      }
    }
  }, [pathname]);

  // Sync activeItem with the prop when it changes
  useEffect(() => {
    if (activeMenuItem && activeMenuItem !== activeItem) {
      setActiveItem(activeMenuItem);

      // Auto-expand submenus based on activeMenuItem
      if (activeMenuItem.includes('Trading View')) {
        setTradingViewOpen(true);
      } else if (activeMenuItem.includes('Scalping Tool')) {
        setScalpingToolOpen(true);
      } else if (activeMenuItem.includes('Copy Trading')) {
        setCopyTradingOpen(true);
      } else if (activeMenuItem.includes('Marketplace')) {
        setMarketplaceOpen(true);
      } else if (activeMenuItem.includes('Back Test')) {
        setBackTestOpen(true);
      } else if (activeMenuItem.includes('Optimization')) {
        setOptimizationOpen(true);
      } else if (activeMenuItem.includes('My Developer')) {
        setMyDeveloperOpen(true);
      } else if (activeMenuItem.includes('Admin')) {
        setAdminOpen(true);
      }
    }
  }, [activeMenuItem, activeItem]);

  // Function to handle menu item click
  const handleMenuItemClick = useCallback(
    (itemName, route) => {
      // Clear any previous active item first
      setActiveItem('');
      
      // Then set the new active item
      setActiveItem(itemName);

      // Store the active menu item in sessionStorage to preserve it across page refreshes
      if (typeof window !== 'undefined') {
        sessionStorage.setItem('dashboardActiveMenuItem', itemName);
      }

      // Pass the active item to the parent component
      if (onMenuItemClick) {
        onMenuItemClick(itemName);
      }

      // Navigate to the route if provided
      if (route) {
        router.push(route);
      }

      // Close the sidebar on mobile after clicking a menu item
      if (window.innerWidth < 768) {
        const sidebar = document.querySelector('.sidebar-mobile');
        if (sidebar) {
          sidebar.classList.add('hidden');
        }
      }
    },
    [onMenuItemClick, router]
  );

  // Function to determine if a menu item is active
  const isActive = useCallback((itemName) => {
    // For paths that should exclusively match their exact menu item
    if (itemName === 'FAQ' && (activeItem === 'FAQ' || pathname?.includes('/dashboard/faq'))) {
      // When on FAQ, only FAQ should be highlighted
      return true;
    }
    
    if (itemName === 'Support' && (activeItem === 'Support' || pathname?.includes('/dashboard/support'))) {
      // When on Support, only Support should be highlighted
      return true;
    }
    
    if (itemName === 'Pricing' && (activeItem === 'Pricing' || pathname?.includes('/dashboard/pricing'))) {
      // When on Pricing, only Pricing should be highlighted
      return true;
    }
    
    // Only highlight Dashboard when we're specifically on the Dashboard page and not a sub-page
    if (itemName === 'Dashboard') {
      return activeItem === 'Dashboard' && pathname === '/dashboard';
    }
    
    // For other menu items with sub-items
    if (pathname !== '/dashboard' && pathname !== '/dashboard/faq' && 
        pathname !== '/dashboard/support' && pathname !== '/dashboard/pricing') {
      if (itemName === 'Trading View' && activeItem?.startsWith('Trading View')) return true;
      if (itemName === 'Scalping Tool' && activeItem?.startsWith('Scalping Tool')) return true;
      if (itemName === 'Copy Trading' && activeItem?.startsWith('Copy Trading')) return true;
      if (itemName === 'Marketplace' && activeItem?.startsWith('Marketplace')) return true;
      if (itemName === 'Back Test' && activeItem?.startsWith('Back Test')) return true;
      if (itemName === 'Optimization' && activeItem?.startsWith('Optimization')) return true;
      if (itemName === 'My Developer' && activeItem?.startsWith('My Developer')) return true;
      if (itemName === 'Admin' && activeItem?.startsWith('Admin')) return true;
    }
    
    // Direct match for other items
    return activeItem === itemName && !pathname?.includes('/dashboard/faq') && 
           !pathname?.includes('/dashboard/support') && !pathname?.includes('/dashboard/pricing');
  }, [activeItem, pathname]);

  // Function to toggle a menu's open state and close others
  const toggleMenu = menuName => {
    switch (menuName) {
      case 'Trading View':
        setTradingViewOpen(!tradingViewOpen);
        break;
      case 'Scalping Tool':
        setScalpingToolOpen(!scalpingToolOpen);
        break;
      case 'Copy Trading':
        setCopyTradingOpen(!copyTradingOpen);
        break;
      case 'Marketplace':
        setMarketplaceOpen(!marketplaceOpen);
        break;
      case 'Back Test':
        setBackTestOpen(!backTestOpen);
        break;
      case 'Optimization':
        setOptimizationOpen(!optimizationOpen);
        break;
      case 'My Developer':
        setMyDeveloperOpen(!myDeveloperOpen);
        break;
      case 'Pricing':
        setPricingOpen(!pricingOpen);
        break;
      case 'FAQ':
        setFaqOpen(!faqOpen);
        break;
      case 'Support':
        setSupportOpen(!supportOpen);
        break;
      case 'Admin':
        setAdminOpen(!adminOpen);
        break;
    }
  };

  // Function to render the sidebar content (used by both desktop and mobile views)
  function renderSidebarContent() {
    return (
      <div className="h-full flex flex-col bg-black border-r border-zinc-800 w-[240px] text-white overflow-y-auto scrollbar-thin scrollbar-thumb-zinc-700">
        <ul className="space-y-1 p-3 flex-grow w-full">
          <li className="w-full">
            <a
              href="#"
              className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Dashboard')
                  ? 'bg-zinc-800 text-white'
                  : 'hover:bg-zinc-800 text-zinc-300'
                }`}
              onClick={e => {
                e.preventDefault();
                handleMenuItemClick('Dashboard', '/dashboard');
              }}
            >
              <img src="/window.svg" alt="Dashboard" className="w-5 h-5 mr-3" />
              <span>Dashboard</span>
            </a>
          </li>
          <hr className="my-2 border-zinc-800" />
          <li className="w-full">
            <a
              href="#"
              className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Broker Auth')
                  ? 'bg-zinc-800 text-white'
                  : 'hover:bg-zinc-800 text-zinc-300'
                }`}
              onClick={e => {
                e.preventDefault();
                handleMenuItemClick('Broker Auth', '/dashboard/broker-auth');
              }}
            >
              <img src="/lock.svg" alt="Broker Auth" className="w-5 h-5 mr-3" />
              <span>Broker Auth</span>
            </a>
          </li>

          {/* Admin section - only shown to admin users */}
          {isAdmin && (
            <li className="w-full">
              <div className="relative w-full">
                <button
                  onClick={() => toggleMenu('Admin')}
                  className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('Admin') || isActive('Admin Users')
                      ? 'bg-zinc-800 text-white'
                      : 'hover:bg-zinc-800 text-zinc-300'
                    }`}
                >
                  <div
                    className="flex items-center w-full"
                    onClick={e => {
                      e.stopPropagation();
                      handleMenuItemClick('Admin');
                      toggleMenu('Admin');
                    }}
                  >
                    <img src="/admin.svg" alt="Admin" className="w-5 h-5 mr-3" />
                    <span>Admin</span>
                  </div>
                </button>

                {adminOpen && (
                  <ul className="pl-8 mt-1 space-y-1 w-full">
                    <li className="w-full">
                      <a
                        href="/dashboard/admin/users"
                        className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Admin Users')
                            ? 'bg-zinc-800 text-white'
                            : 'hover:bg-zinc-800 text-zinc-300'
                          }`}
                        onClick={e => {
                          e.preventDefault();
                          handleMenuItemClick('Admin Users', '/dashboard/admin/users');
                        }}
                      >
                        <span>Users</span>
                      </a>
                    </li>
                  </ul>
                )}
              </div>
            </li>
          )}

          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Trading View')}
                className={`flex items-center justify-between w-full p-2 rounded-lg transition-colors w-full ${isActive('Trading View')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Trading View');
                    toggleMenu('Trading View');
                  }}
                >
                  <img src="/chart.svg" alt="Trading View" className="w-5 h-5 mr-3" />
                  <span>Trading View</span>
                </div>
                {tradingViewOpen ? (
                  <ChevronDown className="w-4 h-4" />
                ) : (
                  <ChevronRight className="w-4 h-4" />
                )}
              </button>

              {tradingViewOpen && (
                <ul className="py-2 ml-4 pl-2 border-l border-zinc-800 w-full">
                  <li className="w-full">
                    <a
                      href="#"
                      className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Trading View: Manage') ? 'bg-zinc-800 text-white' : 'hover:bg-zinc-800 text-zinc-300'}`}
                      onClick={e => {
                        e.preventDefault();
                        handleMenuItemClick(
                          'Trading View: Manage',
                          '/dashboard/trading-view?tab=manage'
                        );
                      }}
                    >
                      <span>Manage</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="#"
                      className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Trading View: Webhook URL') ? 'bg-zinc-800 text-white' : 'hover:bg-zinc-800 text-zinc-300'}`}
                      onClick={e => {
                        e.preventDefault();
                        handleMenuItemClick(
                          'Trading View: Webhook URL',
                          '/dashboard/trading-view?tab=webhook'
                        );
                      }}
                    >
                      <span>Webhook URL</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="#"
                      className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Trading View: JSON Generator') ? 'bg-zinc-800 text-white' : 'hover:bg-zinc-800 text-zinc-300'}`}
                      onClick={e => {
                        e.preventDefault();
                        handleMenuItemClick(
                          'Trading View: JSON Generator',
                          '/dashboard/trading-view?tab=json'
                        );
                      }}
                    >
                      <span>JSON Generator</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="#"
                      className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Trading View: Symbol') ? 'bg-zinc-800 text-white' : 'hover:bg-zinc-800 text-zinc-300'}`}
                      onClick={e => {
                        e.preventDefault();
                        handleMenuItemClick(
                          'Trading View: Symbol',
                          '/dashboard/trading-view?tab=symbol'
                        );
                      }}
                    >
                      <span>Symbol</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="#"
                      className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Trading View: Trade Logs') ? 'bg-zinc-800 text-white' : 'hover:bg-zinc-800 text-zinc-300'}`}
                      onClick={e => {
                        e.preventDefault();
                        handleMenuItemClick(
                          'Trading View: Trade Logs',
                          '/dashboard/trading-view?tab=logs'
                        );
                      }}
                    >
                      <span>Trade Logs</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Scalping Tool')}
                className={`flex items-center justify-between w-full p-2 rounded-lg transition-colors w-full ${isActive('Scalping Tool')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Scalping Tool');
                    toggleMenu('Scalping Tool');
                  }}
                >
                  <img src="/scalping.svg" alt="Scalping Tool" className="w-5 h-5 mr-3" />
                  <span>Scalping Tool</span>
                </div>
                {scalpingToolOpen ? (
                  <ChevronDown className="w-4 h-4" />
                ) : (
                  <ChevronRight className="w-4 h-4" />
                )}
              </button>

              {scalpingToolOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/scalping-tool"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Scalping Tool Manage')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Scalping Tool Manage', '/dashboard/scalping-tool')
                      }
                    >
                      <span>Manage</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Copy Trading')}
                className={`flex items-center justify-between w-full p-2 rounded-lg transition-colors w-full ${isActive('Copy Trading')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Copy Trading');
                    toggleMenu('Copy Trading');
                  }}
                >
                  <img src="/copy-trading.svg" alt="Copy Trading" className="w-5 h-5 mr-3" />
                  <span>Copy Trading</span>
                </div>
                {copyTradingOpen ? (
                  <ChevronDown className="w-4 h-4" />
                ) : (
                  <ChevronRight className="w-4 h-4" />
                )}
              </button>

              {copyTradingOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/copy-trading"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Copy Trading Manage')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Copy Trading Manage', '/dashboard/copy-trading')
                      }
                    >
                      <span>Manage</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="/dashboard/copy-trading/strategy"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Copy Trading Strategy')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick(
                          'Copy Trading Strategy',
                          '/dashboard/copy-trading/strategy'
                        )
                      }
                    >
                      <span>Strategy</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Marketplace')}
                className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('Marketplace')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Marketplace', '/dashboard/marketplace');
                  }}
                >
                  <img src="/market.svg" alt="Marketplace" className="w-5 h-5 mr-3" />
                  <span>Marketplace</span>
                </div>
              </button>

              {marketplaceOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/marketplace/browse"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Marketplace Browse')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Marketplace Browse', '/dashboard/marketplace/browse')
                      }
                    >
                      <span>Browse</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="/dashboard/marketplace/purchases"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Marketplace Purchases')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Marketplace Purchases', '/dashboard/marketplace/purchases')
                      }
                    >
                      <span>My Purchases</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Back Test')}
                className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('Back Test')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Back Test', '/dashboard/backtest');
                  }}
                >
                  <img src="/chart.svg" alt="Back Test" className="w-5 h-5 mr-3" />
                  <span>Back Test</span>
                </div>
              </button>

              {backTestOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/backtest/new"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Back Test New')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Back Test New', '/dashboard/backtest/new')
                      }
                    >
                      <span>New Test</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="/dashboard/backtest/history"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Back Test History')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Back Test History', '/dashboard/backtest/history')
                      }
                    >
                      <span>History</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('Optimization')}
                className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('Optimization')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('Optimization', '/dashboard/optimization');
                  }}
                >
                  <img src="/settings.svg" alt="Optimization" className="w-5 h-5 mr-3" />
                  <span>Optimization</span>
                </div>
              </button>

              {optimizationOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/optimization/run"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Optimization Run')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Optimization Run', '/dashboard/optimization/run')
                      }
                    >
                      <span>Run Optimizer</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="/dashboard/optimization/results"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('Optimization Results')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('Optimization Results', '/dashboard/optimization/results')
                      }
                    >
                      <span>Results</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={() => toggleMenu('My Developer')}
                className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('My Developer')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div
                  className="flex items-center w-full"
                  onClick={e => {
                    e.stopPropagation();
                    handleMenuItemClick('My Developer', '/dashboard/developer');
                  }}
                >
                  <img src="/developer.svg" alt="My Developer" className="w-5 h-5 mr-3" />
                  <span>My Developer</span>
                </div>
              </button>

              {myDeveloperOpen && (
                <ul className="pl-8 mt-1 space-y-1 w-full">
                  <li className="w-full">
                    <a
                      href="/dashboard/developer/profile"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('My Developer Profile')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('My Developer Profile', '/dashboard/developer/profile')
                      }
                    >
                      <span>Profile</span>
                    </a>
                  </li>
                  <li className="w-full">
                    <a
                      href="/dashboard/developer/projects"
                      className={`flex items-center p-2 text-sm rounded-lg transition-colors w-full ${isActive('My Developer Projects')
                          ? 'bg-zinc-800 text-white'
                          : 'hover:bg-zinc-800 text-zinc-300'
                        }`}
                      onClick={() =>
                        handleMenuItemClick('My Developer Projects', '/dashboard/developer/projects')
                      }
                    >
                      <span>Projects</span>
                    </a>
                  </li>
                </ul>
              )}
            </div>
          </li>
          <li className="w-full">
            <div className="relative w-full">
              <button
                onClick={e => {
                  e.preventDefault();
                  handleMenuItemClick('Pricing', '/dashboard/pricing');
                }}
                className={`flex items-center w-full p-2 rounded-lg transition-colors w-full ${isActive('Pricing')
                    ? 'bg-zinc-800 text-white'
                    : 'hover:bg-zinc-800 text-zinc-300'
                  }`}
              >
                <div className="flex items-center">
                  <img src="/file.svg" alt="Pricing" className="w-5 h-5 mr-3" />
                  <span>Pricing</span>
                </div>
              </button>
            </div>
          </li>
          <hr className="my-2 border-zinc-800" />
          <li className="w-full">
            <a
              href="/dashboard/faq"
              className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('FAQ')
                  ? 'bg-zinc-800 text-white'
                  : 'hover:bg-zinc-800 text-zinc-300'
                }`}
              onClick={(e) => {
                e.preventDefault();
                // Explicitly set active item to FAQ
                setActiveItem('FAQ');
                if (typeof window !== 'undefined') {
                  sessionStorage.setItem('dashboardActiveMenuItem', 'FAQ');
                }
                handleMenuItemClick('FAQ', '/dashboard/faq');
              }}
            >
              <img src="/faq.svg" alt="FAQ" className="w-5 h-5 mr-3" />
              <span>FAQ</span>
            </a>
          </li>
          <li className="w-full">
            <a
              href="/dashboard/support"
              className={`flex items-center p-2 rounded-lg transition-colors w-full ${isActive('Support')
                  ? 'bg-zinc-800 text-white'
                  : 'hover:bg-zinc-800 text-zinc-300'
                }`}
              onClick={(e) => {
                e.preventDefault();
                // Explicitly set active item to Support
                setActiveItem('Support');
                if (typeof window !== 'undefined') {
                  sessionStorage.setItem('dashboardActiveMenuItem', 'Support');
                }
                handleMenuItemClick('Support', '/dashboard/support');
              }}
            >
              <img src="/support.svg" alt="Support" className="w-5 h-5 mr-3" />
              <span>Support</span>
            </a>
          </li>
          <hr className="my-2 border-zinc-800" />
          <li className="w-full">
            <a
              href="#"
              className={`flex items-center p-2 text-zinc-300 rounded-lg hover:bg-zinc-800 transition-colors w-full ${isActive('Logout')
                  ? 'bg-zinc-800 text-white'
                  : ''
                }`}
              onClick={e => {
                e.preventDefault();
                signOut();
              }}
            >
              <img src="/logout.svg" alt="Logout" className="w-5 h-5 mr-3" />
              <span>Logout</span>
            </a>
          </li>
        </ul>
      </div>
    );
  }

  return (
    <>
      {/* Desktop Sidebar */}
      <aside className="w-64 md:min-w-[16rem] bg-black border-r border-zinc-800 min-h-[calc(100vh-64px)] transition-all duration-300 overflow-y-auto max-h-[calc(100vh-64px)] hidden md:block">
        <nav className="p-4 w-full">{renderSidebarContent()}</nav>
      </aside>

      {/* Mobile Sidebar - This is just a placeholder div for the dashboard page to target */}
      <div className="md:hidden w-full">
        <nav className="p-4 w-full">{renderSidebarContent()}</nav>
      </div>
    </>
  );
}

// Helper function to determine active menu item from pathname
function getActiveMenuItemFromPath(path) {
  // Special handling for specific pages to ensure they're exclusively highlighted
  if (path === '/dashboard/faq' || path.includes('/dashboard/faq/')) {
    return 'FAQ';
  }
  
  if (path === '/dashboard/support' || path.includes('/dashboard/support/')) {
    return 'Support';
  }
  
  if (path === '/dashboard/pricing') {
    return 'Pricing';
  }
  
  // Only return Dashboard for the exact dashboard path
  if (path === '/dashboard') {
    return 'Dashboard';
  }
  
  // Other paths
  if (path === '/dashboard/broker-auth') return 'Broker Auth';
  if (path.startsWith('/dashboard/trading-view')) {\n    // Check for tab query parameter\n    if (path.includes('?tab=manage')) return 'Trading View: Manage';\n    if (path.includes('?tab=webhook')) return 'Trading View: Webhook URL';\n    if (path.includes('?tab=json')) return 'Trading View: JSON Generator';\n    if (path.includes('?tab=symbol')) return 'Trading View: Symbol';\n    if (path.includes('?tab=logs')) return 'Trading View: Trade Logs';\n    return 'Trading View';\n  }
  if (path === '/dashboard/scalping-tool') return 'Scalping Tool Manage';
  if (path.startsWith('/dashboard/copy-trading')) {
    if (path.includes('/strategy')) return 'Copy Trading Strategy';
    return 'Copy Trading Manage';
  }
  if (path.startsWith('/dashboard/marketplace')) return 'Marketplace';
  if (path.startsWith('/dashboard/backtest')) return 'Back Test';
  if (path.startsWith('/dashboard/optimization')) return 'Optimization';
  if (path.startsWith('/dashboard/developer')) return 'My Developer';
  if (path.startsWith('/dashboard/admin')) return 'Admin Users';
  
  // If nothing else matches, return empty string to avoid default Dashboard highlighting
  return '';
}







